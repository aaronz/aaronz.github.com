---
layout: post
title:  "浏览器布局与重绘 - reflow & repaint"
date:   2014-06-16 00:00:00
categories: Mechanism
---

浏览器渲染过程中有两个重要的概念，他们与页面渲染性能休戚相关，这两个概念是布局(reflow)与重绘(repaint)。本文将结合WebKit的具体实现来解释这两个概念，并介绍与之相关的编程指导经验。

![paint](/assets/images/posts/paint.jpg)

<!--more-->

# 概念

+   布局(reflow) - 浏览器构建渲染树完成时不包含位置和大小信息。计算元素位置和其他几何信息的过程称为布局。

	*   Reflow采用基于流的布局模型，大多数情况下一次遍历就能计算出几何信息。处于流中靠后位置元素通常不会影响靠前位置元素的几何特征，因此布局可以按从左至右、从上至下的顺序遍历文档。但是也有例外情况，比如 HTML 表格的计算就需要不止一次的遍历。
	*   Reflow是一个递归的过程。从根呈现器（对应于 HTML 文档的 <html> 元素）开始，然后递归遍历部分或所有的框架层次结构，为每一个需要计算的呈现器计算几何信息。
	*   所有的渲染器都有一个“laybout”或者“reflow”方法，每一个渲染器都会调用其需要进行布局的子代的 layout 方法。

+   重绘(repaint) - 当布局结束后，浏览器遍历呈现树，调用呈现器的paint方法，将呈现器的内容显示在屏幕上。
	
	部分呈现器发生了更改，但是不会影响整个树。更改后的呈现器将其在屏幕上对应的矩形区域设为无效，这导致 OS 将其视为一块“dirty 区域”，并生成“paint”事件。OS 会很巧妙地将多个区域合并成一个。




https://delicious.com/stubbornella/reflow
