---
layout: post
title:  "AVL树"
date:   2015-10-21 00:00:00
categories: Data-Structures
---

AVL树是其每个节点的左子树和右子树高度最多差1的二叉查找树。因为它的发明者是Adelson-Velsky和Landis，所以叫AVL树。

![AVL Tree](https://upload.wikimedia.org/wikipedia/commons/thumb/f/f5/AVL_Tree_Rebalancing.svg/350px-AVL_Tree_Rebalancing.svg.png)

<!--more-->

#基本操作

##查找

在AVL树中查找同在一般BST完全一样的进行，所以耗费O(log n)时间,因为AVL树总是保持平衡的。不需要特殊的准备,树的结构不会由于查询而改变。

##插入

向AVL树插入,可以透过如同它是未平衡的二叉查找树一样,把给定的值插入树中,接着自底往上向根节点折回,于在插入期间成为不平衡的所有节点上进行旋转来完成。因为折回到根节点的路途上最多有1.44乘logn个节点,而每次AVL旋转都耗费固定的时间，所以插入处理在整体上的耗费为O(log n)时间。

##删除

从AVL树中删除可以通过把要删除的节点向下旋转成一个叶子节点，接着直接剪除这个叶子节点来完成。因为在旋转成叶子节点期间最多有logn个节点被旋转，而每次 AVL 旋转耗费恒定的时间，删除处理在整体上耗费O(log n)时间。


#复杂操作实现

AVL树的基本操作一般涉及运作同在不平衡的二叉查找树所运作的同样的算法。但是要进行预先或随后做一次或多次所谓的"AVL旋转"。
以下图表以四列表示四种情况,每行表示在该种情况下要进行的操作。在左左和右右的情况下,只需要进行一次旋转操作；在左右和右左的情况下,需要进行两次旋转操作。

![旋转操作](https://upload.wikimedia.org/wikipedia/commons/c/c7/Tree_Rebalancing.png)

{%highlight c%}
AvlTree Insert(ElementType x, AvlTree t){
	if(t == NULL){
		t = malloc(sizeof (struct AvlTree));
		if(t == NULL)
			FatalError("Out of space!");
		else{
			t->element = x;
			t->height = 0;
			t->left = t->right = NULL;
		}
	}
	else if(x < t->element){
		t->left = Insert(x, t->left);
		if(Height(t->left) - Height(t->right) == 2)
			if(x < t->left->element)
				t = SingleRotateWithLeft(t);
			else
				t = DoubleRotateWithLeft(t);
	}
	else if(x > t->element){
		t->right = Insert(x, t->right);
		if(Height(t->right) - Height(t->left) == 2)
			if(x > t->right->element)
				t = SingleRoateWithRight(t);
			else
				t = DoubleRotateWithRight(t);
	}
	// else x is already in the tree
	t->height = Max(Height(t->left), Height(t->right)) + 1;
	return t;
}

// This function can be called only if k2 has a left child.
// Perform a rotate between a k2 and its left child
// Update its height
Position SingleRotateWithLeft(Position k2){
	Position k1;
	k1 = k2->left;
	k2->left = k1->right;
	k1->right = k2;

	k2->height = Max(Height(k2->left), Height(k2->right)) + 1;
	k1->height = Max(Height(k1->left), Height(k1->right)) + 1;
	return k1;
}

// This function can be called only if k3 has a left child
// and k3's left child has a right child.
// Do the left-right double rotation
// Update heights and return new roots.
Position DoubleRotateWithLeft(Position k3){
	k3->left = SingleRoateWithRight(k3->left);
	return SingleRotateWithLeft(k3);
}
{%endhighlight%}

#参考

[https://en.wikipedia.org/wiki/AVL_tree](https://en.wikipedia.org/wiki/AVL_tree)
[Data Strutures and Algorithm Analysis in C](http://www.amazon.com/Data-Structures-Algorithm-Analysis-2nd/dp/0201498405/ref=sr_1_1?s=books&ie=UTF8&qid=1445764160&sr=1-1&keywords=data+structures+and+algorithms+analysis+in+c)
